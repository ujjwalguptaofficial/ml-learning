---
name: color_recommendation.mahal
description:
dateCreated: May 10, 2023
---

<html>
<div class="container is-flex is-flex-direction-column is-align-items-center mt-6">
	<div :if(!isTrained) class="is-flex is-flex-direction-column is-align-items-center">
		<h1 class="title is-size-4 mt-0 mb-1">Select your favourite colors</h1>
		<div class="is-flex" :for(colors in inputs)>
			<ColorRow :colors="colors" />
		</div>
		<div class="is-flex mt-4">
			<button :disabled="isTraining" class="button is-primary is-large" :class="{'is-loading':isTraining}"
				@click="train">
				I am done
			</button>
		</div>
	</div>
	<div class="mt-4" :else>
		<h1 class="title is-size-4">You have choosen</h1>
		<div class="is-flex">
			<Color :for(color in selectedColors) :color="color">
			</Color>
		</div>
		<h1 class="title is-size-4 mt-4">Recommendations calculated</h1>
		<div class="is-flex">
			<Color :for(color in results) :color="color">
			</Color>
		</div>
	</div>
</div>
</html>

<script>
import { children, Component, reactive } from "mahal";
import { NeuralNetwork } from "brain.js";
import ColorRow from "@/components/color_recommendation/color_row.mahal";
import Color from "@/components/color_recommendation/color.mahal";

@children({
    ColorRow,
    Color,
})
export default class extends Component {
    colorRecom = new NeuralNetwork({
        // hiddenLayers: 3,
        hiddenLayers: [4],
        inputSize: 3,
        outputSize: 1,
    });

    @reactive
    results = [];

    @reactive
    inputs = [];

    @reactive
    selectedColors = [];

    @reactive
    isTrained = false;

    @reactive
    isTraining = false;

    onInit() {
        window["app"] = this;
        let maxCount = 105;
        let inputs = {};
        while (maxCount != 0) {
            const generatedColor = this.generateNewColor();
            inputs[generatedColor] = false;
            maxCount--;
            if (maxCount % 15 === 0) {
                this.inputs.push(inputs);
                inputs = {};
            }
        }
        // console.log("inputs", this.inputs);
    }

    getRGBFromHash(color) {
        const r = parseInt(color.substr(1, 2), 16);
        const g = parseInt(color.substr(3, 2), 16);
        const b = parseInt(color.substr(5, 2), 16);
        return [r, g, b];
    }

    run(color) {
        const rgb = this.getRGBFromHash(color);
        const input = [rgb[0] / 255, rgb[1] / 255, rgb[2] / 255];
        // console.log("input", input);
        const result = this.colorRecom.run(input);
        return result;
    }

    async train() {
        this.isTraining = true;
        let selectedCount = 0;
        const likedColors = [];
        this.inputs.forEach((colorRow) => {
            for (const color in colorRow) {
                const item = this.getRGBFromHash(color);
                likedColors.push({
                    input: [item[0] / 255, item[1] / 255, item[2] / 255],
                    output: (() => {
                        if (colorRow[color]) {
                            selectedCount++;
                            this.selectedColors.push(color);
                            return [1];
                        }
                        return [0];
                    })(),
                });
            }
        });
        if (selectedCount < 5) {
            alert("Atleast 5 colors needed");
            return;
        }
        const state = await this.colorRecom.trainAsync(likedColors, {
            iterations: 10000,
            // errorThresh: 0.03,
        });
        this.isTraining = false;
        console.log("state", state);
        if (state.error > 0.03) {
            return alert(
                "Could not run recommendation. Seems like there is no fixed pattern"
            );
        }
        this.isTrained = true;

        const output = new Set();
        const input = new Set(this.selectedColors);
        while (output.size < 6) {
            const generatedColor = this.generateNewColor();
            if (!input.has(generatedColor)) {
                const result = this.run(generatedColor);
                // console.log(result);
                if (result[0] > 0.95) {
                    output.add(generatedColor);
                } else {
                    // console.log("found invalid color", generatedColor);
                }
            }
        }
        this.results = Array.from(output);
    }

    generateNewColor() {
        const hexCharacters = [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
        ];

        function getCharacter(index) {
            return hexCharacters[index];
        }
        let hexColorRep = "#";

        for (let index = 0; index < 6; index++) {
            const randomPosition = Math.floor(
                Math.random() * hexCharacters.length
            );
            hexColorRep += getCharacter(randomPosition);
        }

        return hexColorRep;
    }
}
</script>


